name: Debug matrix env/context
run-name: Debug matrix (${{ github.event_name }})
on:
  workflow_dispatch:
  push:
    paths: .github/workflows/debug_matrix.yml
jobs:
  test_build_matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: >
          ruby -rjson -e 'arr = 4.times.map { |i| i }; arr[rand(0..4)] = "err"; puts "matrix=#{{ node: arr }.to_json}"' | tee "$GITHUB_OUTPUT"
  test_matrix:
    runs-on: ubuntu-latest
    needs: [test_build_matrix]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.test_build_matrix.outputs.matrix) }}
    steps:
      - name: Dump github context
        run: echo "$MATRIX_CONTEXT" | jq '.token = "***"' | tee github_context.json
        shell: bash
        env:
          MATRIX_CONTEXT: ${{ toJson(github) }}
      - name: Dump matrix context
        run: echo "$MATRIX_CONTEXT" tee matrix_context.json
        shell: bash
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
      - name: Dump strategy context
        run: echo "$STRATEGY_CONTEXT" | tee strategy_context.json
        shell: bash
        env:
          MATRIX_CONTEXT: ${{ toJson(strategy) }}
      - name: Dump env
        run: env | tee github_env.env
      - name: Dump github context (javascript)
        uses: actions/github-script@v7
        with:
          script: |
            console.log('inputs:', { ...context.payload.inputs })
            console.log('context:', context)
      - name: Upload github context
        uses: actions/upload-artifact@v4
        with:
          name: matrix-artifacts-${{ strategy.job-index }}
          path: |
            github_context.json
            matrix_context.json
            strategy_context.json
            github_env.env
      - name: Hang for a while (to give time for cancelling the workflow)
        if: ${{ matrix.node == 'err' }}
        run: sleep 30
  test_post_matrix:
    runs-on: ubuntu-latest
    needs: [test_matrix]
    if: always()
    steps:
      - name: Dump needs context
        run: echo "$NEEDS_CONTEXT" tee needs_context.json
        shell: bash
        env:
          NEEDS_CONTEXT: ${{ toJson(needs) }}
      - name: Dump needs.*.result context
        run: echo "$NEEDS_RESULT_CONTEXT" tee needs_result_context.json
        shell: bash
        env:
          NEEDS_RESULT_CONTEXT: ${{ toJson(needs.*.result) }}
      - name: Debug interpolation of needs.*.result (1)
        continue-on-error: true
        run: echo ${{ needs.*.result }}
      - name: Debug interpolation of needs.*.result (2)
        continue-on-error: true
        run: echo '${{ needs.*.result }}'
      # raises invalid template error  
      # - name: Debug interpolation of needs.*.result (3)
      #   continue-on-error: true
      #   run: echo "$NEEDS_RESULT_CONTEXT"
      #   env:
      #     NEEDS_RESULT_CONTEXT: ${{ needs.*.result }}
      - name: Debug interpolation of needs.*.result (3)
        continue-on-error: true
        run: echo "$NEEDS_RESULT_CONTEXT"
        env:
          NEEDS_RESULT_CONTEXT: ${{ toJson(needs.*.result) }}
      - name: Debug interpolation of needs.*.result (4)
        continue-on-error: true
        run: echo "$NEEDS_RESULT_CONTEXT"
        env:
          NEEDS_RESULT_CONTEXT: ${{ join(needs.*.result) }}
      - name: Debug interpolation of needs.*.result (5)
        continue-on-error: true
        run: echo "$NEEDS_RESULT_CONTEXT"
        env:
          NEEDS_RESULT_CONTEXT: ${{ join(needs.*.result) }}
      - run: ${{ needs.test_matrix.result == 'success' }}

# Conclusion: "needs.*.result" is always a one-sized array when needs is a single matrix of jobs
# i.e.: in this case, `needs.test_matrix.result` is always the final result of the matrix of jobs,
# as if it were a single job ("success", "failed", "cancelled", etc)
